Document (globalcampus.site/namespace.stxt): Documentos sin namespace

	header:	Nodos e identación
	
	Content:	
		Antes hemos dicho que un documento @STxT@ es un conjunto de nodos anidados. Pero no hemos dicho
		cuáles son las reglas de anidación, ni como se hace. Pero todo es muy intuitivo y visual:
		
	assert:
		Se hace según la identación del nodo. 
		
	Content:
		Mejor un ejemplo, es más fácil verlo que explicarlo:
		
	code:
		Nodo 1(x):
			Nodo 2:
				Nodo 3: Texto nodo 3
				Nodo 4: Texto nodo 4
			Nodo 5:
				Nodo 6: Texto nodo 6
				Nodo 7: Texto nodo 7
		
	Content:
		En este ejemplo tenemos un nodo principal _Nodo 1_, que a su vez contiene 2 nodos: _Nodo 2_ y _Nodo 5_.
		A su vez _Nodo 2_ contiene a _Nodo 3_ y _Nodo 4_, y _Nodo 5_ contiene _Nodo 6_ y _Nodo 7_. 
		
		Esta estructura es muy visual (realmente la explicación ha sido más complicada),
		y fácilmente deducible de la identación de cada nodo. 
		Con sólo cambiar la identación, cambiamos esta estructura.
		
		Por ejemplo, el siguiente documento es igual, pero con una identación distinta:
		
	code:
		Nodo 1(...):
			Nodo 2:
				Nodo 3: Texto nodo 3
				Nodo 4: Texto nodo 4
				Nodo 5:
					Nodo 6: Texto nodo 6
			Nodo 7: Texto nodo 7
		 
	Content:
		Ahora toda la estructura ha cambiado:
		
		* Nodo 1: Contiene Nodo 2 y 7
		* Nodo 2: Contiene Nodo 3,4 y 5
		* Nodo 5: Contiene Nodo 6
		
		Vemos que la estructura jerárquica ha cambiado completamente.
		
		En nuestra receta de ejemplo, la estructura era:
		
	code:
		Receta(...):
			Titulo:
			Descripción:
			Ingredientes:
			Preparación:
		
	Content:
		Teníamos un nodo _Receta_ que contenía todos los otros nodos.
		
		Vemos que la identación es la clave, y la identación se obtiene mediante caracteres de tabulación.
		También es posible mediante espacios, aunque los tabuladores siempre han sido un estándar en textos, 
		por lo que es la forma recomendada en @STxT@ (además de ahorrar espacio).
		
	assert:
		Regla: Un documento @STxT@ sólo puede tener un nodo principal
		
	Content:
		Esta regla tiene que cumplirse siempre, lo que permite una simplificación en la estructuración de los 
		documentos. Por ello, los nodos de 2º nivel no es necesario que estén alineados.
		
		En nuestro ejemplo anterior, podríamos tener la siguiente estructura, con el mismo significado:
		
	code:
		Receta(...):
		Titulo:
		Descripción:
		Ingredientes:
		Preparación:
		
	Content:
		Gracias a la estructura, el primer nodo encontrado es el principal, 
		y todos los demás se consideran sus hijos. 
		De la misma forma tendríamos que el siguiente texto
		
	code:
		Nodo 1(...):
			Nodo 2:
				Nodo 3: Texto nodo 3
				Nodo 4: Texto nodo 4
			Nodo 5:
				Nodo 6: Texto nodo 6
				Nodo 7: Texto nodo 7
		
	Content:
		es equivalente a 
		
	code:
		Nodo 1(...):
		
		Nodo 2:
			Nodo 3: Texto nodo 3
			Nodo 4: Texto nodo 4
		Nodo 5:
			Nodo 6: Texto nodo 6
			Nodo 7: Texto nodo 7
		
	header:	Nodo y Texto
		
	Content:
		Los tipos de nodo más habituales en los documentos @STxT@ son NODO y TEXTO.
		El tipo nodo es un contenedor para otros nodos, mientras que el tipo texto 
		permite la inserción de un texto, sin restricciones.
		
	assert:
		La alineación es lo único que importa
			
	Content:	
		Ésta es la regla básica para todos los nodos. Anteriormente hemos visto cómo la alineación 
		cambiaba la jerarquía de nodos. En los nodos de texto la alineación permite incluir 
		cualquier tipo de contenido _SIN TENER NECESIDAD DE UTILIZAR CARACTERES DE ESCAPE_.
		La única restricción es que debe estar alineado un nivel más que el nodo texto.
		
		Un ejemplo, por favor:
		
	code:
		Nodo(...):
			Nodo Texto: Aquí empieza el contenido del nodo texto. 
				Todas las líneas tienen que estar con una alineación superior 
				a "Nodo Texto:". Vemos que no es necesario caracteres de escape.
				Por la alineación sabemos qué forma parte de "Nodo Texto".
		
	Content:
		Ahora más diversión... y si introducimos xml en el texto? 
		Veremos que no hay problema alguno. Podemos insertar contenido texto 
		sin tener que escapar ningún carácter. _¡Por Fin!_
	
	code:
		Nodo(...):
			Nodo Texto: Vamos a poner un ejemplo de xml; 
				de como se hacían las cosas antes de STxT:
				<nodo>
					<nodo1>Esto es un ejemplo</nodo1>
					<nodo2>Esto es un ejemplo de escape: &lt; </nodo2>
				</nodo>
		
	header:	Comentarios
		
	Content:
		Todos los informáticos saben qué son los comentarios en cualquier lenguaje.
		Por si hay algún neófito explicaré que los comentarios son texto que sólo están ahí 
		para comentar o añadir alguna observación, pero no influyen en el documento en sí.
		
	assert:
		En @STxT@ son comentarios todas las líneas que empiezan por el carácter #
		
	Content:
		Volvemos a nuestro ejemplo. Imaginemos que queremos añadir información a nuestra receta,
		pero esta información es sólo a título de curiosidad, o incluso para aumentar 
		la legibilidad del documento. Pues bien, esta información la añadiríamos como un comentario.
		
	code:	
		# -----------------------------------------------------
		# Autor = Joan Costa Mombiela
		# Fecha creación = 05-04-2013
		# Esta receta es originaria del Empordà. Nos fue dada
		# a través de unos familiares muy queridos.
		# En agradecimiento, la hemos publicado como la 1ª
		# receta de este libro.
		# -----------------------------------------------------
		
		Receta(www.kocinando.com/receta.stxt):
		
		Título: Buñuelos de Girona
		
		Descripción: Esta es una receta para hacer buñuelos en la época de Cuaresma.
			Son conocidos
				...
			
		Ingredientes:
			1Kg harina
			...
				
		Preparación:
			En un recipiente pondremos la harina y el resto de ingredientes.
			...
		
	Content:
		Los comentarios no tienen que tener ningún tipo de formato, 
		es texto libre que el autor del documento puede incluir. 
		Además, no tiene que estar situado en ningún sitio concreto del documento. 
		Cualquier línea que empiece por # será tratada como comentario,
		y no será tenida en cuenta ni en programas ni en comunicaciones.
		
	header:	Por fin, la gramática
		 
	Content:
		Y aquí está la gramática. O la definición de nodos del namespace.
		En el próximo capítulo la veremos en más profundidad, 
		pero es bastante explicativa por sí misma;
		como todos los documentos @STxT@ ;-)
		    
	code:
		Namespace Definition(www.semantictext.info/namespace.stxt):
		
		Node Definition:
			Type:NODE
			Name:Receta
			Child:
				Node:Título
				Num:1
			Child:
				Node:Descripción
				Num:?
			Child:
				Node:Ingredientes
				Num:1
			Child:
				Node:Preparación
				Num:1
				
		Node Definition:
			Type:TEXT
			Name:Título
			
		Node Definition:
			Type:TEXT
			Name:Descripción
			
		Node Definition:
			Type:TEXT
			Name:Ingredientes
			
		Node Definition:
			Type:TEXT
			Name:Preparación
		  
	Content:  
		La información que contiene es la que ya habíamos visto anteriormente:
		
		* Hay 4 nodos de texto: Título, Descripción, Ingredientes, Preparación
		* Hay un nodo contenedor de otros: Receta. Éste a su vez debe contener a los demás, de la siguiente forma:
		** Ha de haber **un** nodo Título
		** **Puede** haber una Descripción
		** Ha de haber **un** nodo Ingredientes
		** Ha de haber **un** nodo Preparación
		
		A título de información, hay 11 tipos de nodo, aunque el de nodo y texto son los más habituales:
		
		NODE, TEXT, URL, NATURAL, INTEGER, RATIONAL, NUMBER, BINARY, HEXADECIMAL, BASE64, BOOLEAN
			
		Por lo que hace a Num tenemos las siguientes posibilidades: número, ?, +, *
		Todos ellos son muy intuitivos para quien está acostumbrado a trabajar con expresiones regulares.
		    
	header:	Resumen
		
	Content:
		* Un documento @STxT@ es un conjunto de nodos jerárquicos.
		* La estructura de cualquier nodo está definida en su namespace correspondiente.
		* La jerarquía de nodos se puede ver de forma visual, 
		  y se consigue con la identación (mediante tabuladores).
		* Un documento @STxT@ sólo puede tener un nodo principal, 
		  lo que permite alinear a sus hijos sin necesidad de identarlos
		* No se debe especificar los namespaces de todos los nodos, sólo del nodo principal. 
		  Los demás serán deducidos de forma automática.
		* Un documento puede tener nodos de diferentes namespaces.
		* Un documento tiene que cumplir su gramática correspondiente.
	
